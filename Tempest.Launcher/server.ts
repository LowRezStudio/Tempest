// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "server.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Server
 */
export interface Server {
	/**
	 * @generated from protobuf field: uint64 id = 1
	 */
	id: bigint;
	/**
	 * @generated from protobuf field: string name = 2
	 */
	name: string;
	/**
	 * @generated from protobuf field: string game = 3
	 */
	game: string;
	/**
	 * @generated from protobuf field: string version = 4
	 */
	version: string;
	/**
	 * @generated from protobuf field: string tags = 5
	 */
	tags: string;
	/**
	 * @generated from protobuf field: uint32 players = 6
	 */
	players: number;
	/**
	 * @generated from protobuf field: uint32 max_players = 7
	 */
	maxPlayers: number;
	/**
	 * @generated from protobuf field: uint32 bots = 8
	 */
	bots: number;
	/**
	 * @generated from protobuf field: bool join_in_progress = 9
	 */
	joinInProgress: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class Server$Type extends MessageType<Server> {
	constructor() {
		super("Server", [
			{ no: 1, name: "id", kind: "scalar", T: 4, /*ScalarType.UINT64*/ L: 0 /*LongType.BIGINT*/ },
			{ no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 3, name: "game", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 4, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 5, name: "tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 6, name: "players", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
			{ no: 7, name: "max_players", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
			{ no: 8, name: "bots", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
			{ no: 9, name: "join_in_progress", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
		]);
	}
	create(value?: PartialMessage<Server>): Server {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.id = 0n;
		message.name = "";
		message.game = "";
		message.version = "";
		message.tags = "";
		message.players = 0;
		message.maxPlayers = 0;
		message.bots = 0;
		message.joinInProgress = false;
		if (value !== undefined) {
			reflectionMergePartial<Server>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Server): Server {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* uint64 id */ 1:
					message.id = reader.uint64().toBigInt();
					break;
				case /* string name */ 2:
					message.name = reader.string();
					break;
				case /* string game */ 3:
					message.game = reader.string();
					break;
				case /* string version */ 4:
					message.version = reader.string();
					break;
				case /* string tags */ 5:
					message.tags = reader.string();
					break;
				case /* uint32 players */ 6:
					message.players = reader.uint32();
					break;
				case /* uint32 max_players */ 7:
					message.maxPlayers = reader.uint32();
					break;
				case /* uint32 bots */ 8:
					message.bots = reader.uint32();
					break;
				case /* bool join_in_progress */ 9:
					message.joinInProgress = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(message: Server, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* uint64 id = 1; */
		if (message.id !== 0n) {
			writer.tag(1, WireType.Varint).uint64(message.id);
		}
		/* string name = 2; */
		if (message.name !== "") {
			writer.tag(2, WireType.LengthDelimited).string(message.name);
		}
		/* string game = 3; */
		if (message.game !== "") {
			writer.tag(3, WireType.LengthDelimited).string(message.game);
		}
		/* string version = 4; */
		if (message.version !== "") {
			writer.tag(4, WireType.LengthDelimited).string(message.version);
		}
		/* string tags = 5; */
		if (message.tags !== "") {
			writer.tag(5, WireType.LengthDelimited).string(message.tags);
		}
		/* uint32 players = 6; */
		if (message.players !== 0) {
			writer.tag(6, WireType.Varint).uint32(message.players);
		}
		/* uint32 max_players = 7; */
		if (message.maxPlayers !== 0) {
			writer.tag(7, WireType.Varint).uint32(message.maxPlayers);
		}
		/* uint32 bots = 8; */
		if (message.bots !== 0) {
			writer.tag(8, WireType.Varint).uint32(message.bots);
		}
		/* bool join_in_progress = 9; */
		if (message.joinInProgress !== false) {
			writer.tag(9, WireType.Varint).bool(message.joinInProgress);
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message Server
 */
export const Server = new Server$Type();
