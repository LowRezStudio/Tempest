// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "server_list_service.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
import type { Server } from "./server";
import { ServerListService } from "./server_list_service";
import type { GetServerByIdResponse } from "./server_list_service";
import type { GetServerByIdRequest } from "./server_list_service";
import type { GetServersRequest } from "./server_list_service";
/**
 * @generated from protobuf service ServerListService
 */
export interface IServerListServiceClient {
	/**
	 * @generated from protobuf rpc: GetServers
	 */
	getServers(input: GetServersRequest, options?: RpcOptions): ServerStreamingCall<GetServersRequest, Server>;
	/**
	 * @generated from protobuf rpc: GetServerById
	 */
	getServerById(
		input: GetServerByIdRequest,
		options?: RpcOptions,
	): UnaryCall<GetServerByIdRequest, GetServerByIdResponse>;
}
/**
 * @generated from protobuf service ServerListService
 */
export class ServerListServiceClient implements IServerListServiceClient, ServiceInfo {
	typeName = ServerListService.typeName;
	methods = ServerListService.methods;
	options = ServerListService.options;
	constructor(private readonly _transport: RpcTransport) {
	}
	/**
	 * @generated from protobuf rpc: GetServers
	 */
	getServers(input: GetServersRequest, options?: RpcOptions): ServerStreamingCall<GetServersRequest, Server> {
		const method = this.methods[0], opt = this._transport.mergeOptions(options);
		return stackIntercept<GetServersRequest, Server>("serverStreaming", this._transport, method, opt, input);
	}
	/**
	 * @generated from protobuf rpc: GetServerById
	 */
	getServerById(
		input: GetServerByIdRequest,
		options?: RpcOptions,
	): UnaryCall<GetServerByIdRequest, GetServerByIdResponse> {
		const method = this.methods[1], opt = this._transport.mergeOptions(options);
		return stackIntercept<GetServerByIdRequest, GetServerByIdResponse>("unary", this._transport, method, opt, input);
	}
}
