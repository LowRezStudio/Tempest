// @generated by protobuf-ts 2.11.1 with parameter server_none
// @generated from protobuf file "lobby/lobby_player.proto" (package "tempest.lobby", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message tempest.lobby.LobbyPlayer
 */
export interface LobbyPlayer {
	/**
	 * @generated from protobuf field: string id = 1
	 */
	id: string;
	/**
	 * @generated from protobuf field: string display_name = 2
	 */
	displayName: string;
	/**
	 * @generated from protobuf field: int32 task_force = 3
	 */
	taskForce: number;
	/**
	 * @generated from protobuf field: string champion = 4
	 */
	champion: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class LobbyPlayer$Type extends MessageType<LobbyPlayer> {
	constructor() {
		super("tempest.lobby.LobbyPlayer", [
			{ no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 2, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 3, name: "task_force", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
			{ no: 4, name: "champion", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
		]);
	}
	create(value?: PartialMessage<LobbyPlayer>): LobbyPlayer {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.id = "";
		message.displayName = "";
		message.taskForce = 0;
		message.champion = "";
		if (value !== undefined) {
			reflectionMergePartial<LobbyPlayer>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: LobbyPlayer,
	): LobbyPlayer {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* string id */ 1:
					message.id = reader.string();
					break;
				case /* string display_name */ 2:
					message.displayName = reader.string();
					break;
				case /* int32 task_force */ 3:
					message.taskForce = reader.int32();
					break;
				case /* string champion */ 4:
					message.champion = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(message: LobbyPlayer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* string id = 1; */
		if (message.id !== "") {
			writer.tag(1, WireType.LengthDelimited).string(message.id);
		}
		/* string display_name = 2; */
		if (message.displayName !== "") {
			writer.tag(2, WireType.LengthDelimited).string(message.displayName);
		}
		/* int32 task_force = 3; */
		if (message.taskForce !== 0) {
			writer.tag(3, WireType.Varint).int32(message.taskForce);
		}
		/* string champion = 4; */
		if (message.champion !== "") {
			writer.tag(4, WireType.LengthDelimited).string(message.champion);
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message tempest.lobby.LobbyPlayer
 */
export const LobbyPlayer = new LobbyPlayer$Type();
