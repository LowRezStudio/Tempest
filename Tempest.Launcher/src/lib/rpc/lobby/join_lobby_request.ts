// @generated by protobuf-ts 2.11.1 with parameter server_none
// @generated from protobuf file "lobby/join_lobby_request.proto" (package "tempest.lobby", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message tempest.lobby.JoinLobbyRequest
 */
export interface JoinLobbyRequest {
	/**
	 * @generated from protobuf field: string player_id = 1
	 */
	playerId: string;
	/**
	 * @generated from protobuf field: string player_display_name = 2
	 */
	playerDisplayName: string;
	/**
	 * @generated from protobuf field: optional string password = 5
	 */
	password?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class JoinLobbyRequest$Type extends MessageType<JoinLobbyRequest> {
	constructor() {
		super("tempest.lobby.JoinLobbyRequest", [
			{ no: 1, name: "player_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 2, name: "player_display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 5, name: "password", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
		]);
	}
	create(value?: PartialMessage<JoinLobbyRequest>): JoinLobbyRequest {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.playerId = "";
		message.playerDisplayName = "";
		if (value !== undefined) reflectionMergePartial<JoinLobbyRequest>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: JoinLobbyRequest,
	): JoinLobbyRequest {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* string player_id */ 1:
					message.playerId = reader.string();
					break;
				case /* string player_display_name */ 2:
					message.playerDisplayName = reader.string();
					break;
				case /* optional string password */ 5:
					message.password = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						);
					let d = reader.skip(wireType);
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: JoinLobbyRequest,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* string player_id = 1; */
		if (message.playerId !== "")
			writer.tag(1, WireType.LengthDelimited).string(message.playerId);
		/* string player_display_name = 2; */
		if (message.playerDisplayName !== "")
			writer.tag(2, WireType.LengthDelimited).string(message.playerDisplayName);
		/* optional string password = 5; */
		if (message.password !== undefined)
			writer.tag(5, WireType.LengthDelimited).string(message.password);
		let u = options.writeUnknownFields;
		if (u !== false)
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message tempest.lobby.JoinLobbyRequest
 */
export const JoinLobbyRequest = new JoinLobbyRequest$Type();
