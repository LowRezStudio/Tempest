// @generated by protobuf-ts 2.11.1 with parameter server_none
// @generated from protobuf file "lobby/lobby_state.proto" (package "tempest.lobby", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LobbyStateChampionSelect } from "./lobby_state_champion_select";
import { LobbyStateInGame } from "./lobby_state_in_game";
import { LobbyStateMapVote } from "./lobby_state_map_vote";
import { LobbyStateWaiting } from "./lobby_state_waiting";
/**
 * @generated from protobuf message tempest.lobby.LobbyState
 */
export interface LobbyState {
	/**
	 * @generated from protobuf field: optional tempest.lobby.LobbyStateWaiting waiting = 1
	 */
	waiting?: LobbyStateWaiting;
	/**
	 * @generated from protobuf field: optional tempest.lobby.LobbyStateMapVote map_vote = 2
	 */
	mapVote?: LobbyStateMapVote;
	/**
	 * @generated from protobuf field: optional tempest.lobby.LobbyStateChampionSelect champion_select = 3
	 */
	championSelect?: LobbyStateChampionSelect;
	/**
	 * @generated from protobuf field: optional tempest.lobby.LobbyStateInGame in_game = 4
	 */
	inGame?: LobbyStateInGame;
}
// @generated message type with reflection information, may provide speed optimized methods
class LobbyState$Type extends MessageType<LobbyState> {
	constructor() {
		super("tempest.lobby.LobbyState", [
			{ no: 1, name: "waiting", kind: "message", T: () => LobbyStateWaiting },
			{ no: 2, name: "map_vote", kind: "message", T: () => LobbyStateMapVote },
			{ no: 3, name: "champion_select", kind: "message", T: () => LobbyStateChampionSelect },
			{ no: 4, name: "in_game", kind: "message", T: () => LobbyStateInGame },
		]);
	}
	create(value?: PartialMessage<LobbyState>): LobbyState {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) {
			reflectionMergePartial<LobbyState>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: LobbyState,
	): LobbyState {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional tempest.lobby.LobbyStateWaiting waiting */ 1:
					message.waiting = LobbyStateWaiting.internalBinaryRead(reader, reader.uint32(), options, message.waiting);
					break;
				case /* optional tempest.lobby.LobbyStateMapVote map_vote */ 2:
					message.mapVote = LobbyStateMapVote.internalBinaryRead(reader, reader.uint32(), options, message.mapVote);
					break;
				case /* optional tempest.lobby.LobbyStateChampionSelect champion_select */ 3:
					message.championSelect = LobbyStateChampionSelect.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.championSelect,
					);
					break;
				case /* optional tempest.lobby.LobbyStateInGame in_game */ 4:
					message.inGame = LobbyStateInGame.internalBinaryRead(reader, reader.uint32(), options, message.inGame);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(message: LobbyState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* optional tempest.lobby.LobbyStateWaiting waiting = 1; */
		if (message.waiting) {
			LobbyStateWaiting.internalBinaryWrite(message.waiting, writer.tag(1, WireType.LengthDelimited).fork(), options)
				.join();
		}
		/* optional tempest.lobby.LobbyStateMapVote map_vote = 2; */
		if (message.mapVote) {
			LobbyStateMapVote.internalBinaryWrite(message.mapVote, writer.tag(2, WireType.LengthDelimited).fork(), options)
				.join();
		}
		/* optional tempest.lobby.LobbyStateChampionSelect champion_select = 3; */
		if (message.championSelect) {
			LobbyStateChampionSelect.internalBinaryWrite(
				message.championSelect,
				writer.tag(3, WireType.LengthDelimited).fork(),
				options,
			).join();
		}
		/* optional tempest.lobby.LobbyStateInGame in_game = 4; */
		if (message.inGame) {
			LobbyStateInGame.internalBinaryWrite(message.inGame, writer.tag(4, WireType.LengthDelimited).fork(), options)
				.join();
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message tempest.lobby.LobbyState
 */
export const LobbyState = new LobbyState$Type();
