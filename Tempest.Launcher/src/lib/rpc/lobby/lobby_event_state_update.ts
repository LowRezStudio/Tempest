// @generated by protobuf-ts 2.11.1 with parameter server_none
// @generated from protobuf file "lobby/lobby_event_state_update.proto" (package "tempest.lobby", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LobbyState } from "./lobby_state";
/**
 * @generated from protobuf message tempest.lobby.LobbyEventStateUpdate
 */
export interface LobbyEventStateUpdate {
	/**
	 * @generated from protobuf field: tempest.lobby.LobbyState state = 1
	 */
	state?: LobbyState;
}
// @generated message type with reflection information, may provide speed optimized methods
class LobbyEventStateUpdate$Type extends MessageType<LobbyEventStateUpdate> {
	constructor() {
		super("tempest.lobby.LobbyEventStateUpdate", [
			{ no: 1, name: "state", kind: "message", T: () => LobbyState },
		]);
	}
	create(value?: PartialMessage<LobbyEventStateUpdate>): LobbyEventStateUpdate {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<LobbyEventStateUpdate>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: LobbyEventStateUpdate,
	): LobbyEventStateUpdate {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* tempest.lobby.LobbyState state */ 1:
					message.state = LobbyState.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.state,
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						);
					let d = reader.skip(wireType);
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: LobbyEventStateUpdate,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* tempest.lobby.LobbyState state = 1; */
		if (message.state)
			LobbyState.internalBinaryWrite(
				message.state,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false)
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message tempest.lobby.LobbyEventStateUpdate
 */
export const LobbyEventStateUpdate = new LobbyEventStateUpdate$Type();
