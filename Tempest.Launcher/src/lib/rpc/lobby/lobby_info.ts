// @generated by protobuf-ts 2.11.1 with parameter server_none
// @generated from protobuf file "lobby/lobby_info.proto" (package "tempest.lobby", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LobbyPlayer } from "./lobby_player";
import { LobbyState } from "./lobby_state";
/**
 * @generated from protobuf message tempest.lobby.LobbyInfo
 */
export interface LobbyInfo {
	/**
	 * @generated from protobuf field: string name = 1
	 */
	name: string;
	/**
	 * @generated from protobuf field: tempest.lobby.LobbyState state = 2
	 */
	state?: LobbyState;
	/**
	 * @generated from protobuf field: repeated tempest.lobby.LobbyPlayer players = 3
	 */
	players: LobbyPlayer[];
}
// @generated message type with reflection information, may provide speed optimized methods
class LobbyInfo$Type extends MessageType<LobbyInfo> {
	constructor() {
		super("tempest.lobby.LobbyInfo", [
			{ no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 2, name: "state", kind: "message", T: () => LobbyState },
			{ no: 3, name: "players", kind: "message", repeat: 2, /*RepeatType.UNPACKED*/ T: () => LobbyPlayer },
		]);
	}
	create(value?: PartialMessage<LobbyInfo>): LobbyInfo {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.name = "";
		message.players = [];
		if (value !== undefined) {
			reflectionMergePartial<LobbyInfo>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LobbyInfo): LobbyInfo {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* string name */ 1:
					message.name = reader.string();
					break;
				case /* tempest.lobby.LobbyState state */ 2:
					message.state = LobbyState.internalBinaryRead(reader, reader.uint32(), options, message.state);
					break;
				case /* repeated tempest.lobby.LobbyPlayer players */ 3:
					message.players.push(LobbyPlayer.internalBinaryRead(reader, reader.uint32(), options));
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(message: LobbyInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* string name = 1; */
		if (message.name !== "") {
			writer.tag(1, WireType.LengthDelimited).string(message.name);
		}
		/* tempest.lobby.LobbyState state = 2; */
		if (message.state) {
			LobbyState.internalBinaryWrite(message.state, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
		}
		/* repeated tempest.lobby.LobbyPlayer players = 3; */
		for (let i = 0; i < message.players.length; i++) {
			LobbyPlayer.internalBinaryWrite(message.players[i], writer.tag(3, WireType.LengthDelimited).fork(), options)
				.join();
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message tempest.lobby.LobbyInfo
 */
export const LobbyInfo = new LobbyInfo$Type();
