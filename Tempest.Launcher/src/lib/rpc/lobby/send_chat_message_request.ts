// @generated by protobuf-ts 2.11.1 with parameter server_none
// @generated from protobuf file "lobby/send_chat_message_request.proto" (package "tempest.lobby", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message tempest.lobby.SendChatMessageRequest
 */
export interface SendChatMessageRequest {
	/**
	 * @generated from protobuf field: string content = 1
	 */
	content: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SendChatMessageRequest$Type extends MessageType<SendChatMessageRequest> {
	constructor() {
		super("tempest.lobby.SendChatMessageRequest", [
			{ no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
		]);
	}
	create(value?: PartialMessage<SendChatMessageRequest>): SendChatMessageRequest {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.content = "";
		if (value !== undefined) {
			reflectionMergePartial<SendChatMessageRequest>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: SendChatMessageRequest,
	): SendChatMessageRequest {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* string content */ 1:
					message.content = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: SendChatMessageRequest,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* string content = 1; */
		if (message.content !== "") {
			writer.tag(1, WireType.LengthDelimited).string(message.content);
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message tempest.lobby.SendChatMessageRequest
 */
export const SendChatMessageRequest = new SendChatMessageRequest$Type();
