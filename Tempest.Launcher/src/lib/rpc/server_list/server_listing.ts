// @generated by protobuf-ts 2.11.1 with parameter server_none
// @generated from protobuf file "server_list/server_listing.proto" (package "tempest.server_list", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CountryCode } from "../common/country";
/**
 * @generated from protobuf message tempest.server_list.ServerListing
 */
export interface ServerListing {
	/**
	 * @generated from protobuf field: uint64 id = 1
	 */
	id: bigint;
	/**
	 * @generated from protobuf field: string ip = 2
	 */
	ip: string;
	/**
	 * @generated from protobuf field: uint32 lobby_port = 3
	 */
	lobbyPort: number;
	/**
	 * @generated from protobuf field: string name = 4
	 */
	name: string;
	/**
	 * @generated from protobuf field: string game = 5
	 */
	game: string;
	/**
	 * @generated from protobuf field: string version = 6
	 */
	version: string;
	/**
	 * @generated from protobuf field: repeated string tags = 7
	 */
	tags: string[];
	/**
	 * @generated from protobuf field: optional string map = 8
	 */
	map?: string;
	/**
	 * @generated from protobuf field: uint32 players = 9
	 */
	players: number;
	/**
	 * @generated from protobuf field: uint32 max_players = 10
	 */
	maxPlayers: number;
	/**
	 * @generated from protobuf field: uint32 bots = 11
	 */
	bots: number;
	/**
	 * @generated from protobuf field: uint32 max_spectators = 12
	 */
	maxSpectators: number;
	/**
	 * @generated from protobuf field: uint32 spectators = 13
	 */
	spectators: number;
	/**
	 * @generated from protobuf field: bool join_in_progress = 14
	 */
	joinInProgress: boolean;
	/**
	 * @generated from protobuf field: bool joinable = 15
	 */
	joinable: boolean;
	/**
	 * @generated from protobuf field: bool has_password = 16
	 */
	hasPassword: boolean;
	/**
	 * @generated from protobuf field: tempest.common.CountryCode country = 17
	 */
	country: CountryCode;
}
// @generated message type with reflection information, may provide speed optimized methods
class ServerListing$Type extends MessageType<ServerListing> {
	constructor() {
		super("tempest.server_list.ServerListing", [
			{ no: 1, name: "id", kind: "scalar", T: 4, /*ScalarType.UINT64*/ L: 0 /*LongType.BIGINT*/ },
			{ no: 2, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 3, name: "lobby_port", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
			{ no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 5, name: "game", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 6, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 7, name: "tags", kind: "scalar", repeat: 2, /*RepeatType.UNPACKED*/ T: 9 /*ScalarType.STRING*/ },
			{ no: 8, name: "map", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
			{ no: 9, name: "players", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
			{ no: 10, name: "max_players", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
			{ no: 11, name: "bots", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
			{ no: 12, name: "max_spectators", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
			{ no: 13, name: "spectators", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
			{ no: 14, name: "join_in_progress", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
			{ no: 15, name: "joinable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
			{ no: 16, name: "has_password", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
			{ no: 17, name: "country", kind: "enum", T: () => ["tempest.common.CountryCode", CountryCode] },
		]);
	}
	create(value?: PartialMessage<ServerListing>): ServerListing {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.id = 0n;
		message.ip = "";
		message.lobbyPort = 0;
		message.name = "";
		message.game = "";
		message.version = "";
		message.tags = [];
		message.players = 0;
		message.maxPlayers = 0;
		message.bots = 0;
		message.maxSpectators = 0;
		message.spectators = 0;
		message.joinInProgress = false;
		message.joinable = false;
		message.hasPassword = false;
		message.country = 0;
		if (value !== undefined) {
			reflectionMergePartial<ServerListing>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: ServerListing,
	): ServerListing {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* uint64 id */ 1:
					message.id = reader.uint64().toBigInt();
					break;
				case /* string ip */ 2:
					message.ip = reader.string();
					break;
				case /* uint32 lobby_port */ 3:
					message.lobbyPort = reader.uint32();
					break;
				case /* string name */ 4:
					message.name = reader.string();
					break;
				case /* string game */ 5:
					message.game = reader.string();
					break;
				case /* string version */ 6:
					message.version = reader.string();
					break;
				case /* repeated string tags */ 7:
					message.tags.push(reader.string());
					break;
				case /* optional string map */ 8:
					message.map = reader.string();
					break;
				case /* uint32 players */ 9:
					message.players = reader.uint32();
					break;
				case /* uint32 max_players */ 10:
					message.maxPlayers = reader.uint32();
					break;
				case /* uint32 bots */ 11:
					message.bots = reader.uint32();
					break;
				case /* uint32 max_spectators */ 12:
					message.maxSpectators = reader.uint32();
					break;
				case /* uint32 spectators */ 13:
					message.spectators = reader.uint32();
					break;
				case /* bool join_in_progress */ 14:
					message.joinInProgress = reader.bool();
					break;
				case /* bool joinable */ 15:
					message.joinable = reader.bool();
					break;
				case /* bool has_password */ 16:
					message.hasPassword = reader.bool();
					break;
				case /* tempest.common.CountryCode country */ 17:
					message.country = reader.int32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(message: ServerListing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* uint64 id = 1; */
		if (message.id !== 0n) {
			writer.tag(1, WireType.Varint).uint64(message.id);
		}
		/* string ip = 2; */
		if (message.ip !== "") {
			writer.tag(2, WireType.LengthDelimited).string(message.ip);
		}
		/* uint32 lobby_port = 3; */
		if (message.lobbyPort !== 0) {
			writer.tag(3, WireType.Varint).uint32(message.lobbyPort);
		}
		/* string name = 4; */
		if (message.name !== "") {
			writer.tag(4, WireType.LengthDelimited).string(message.name);
		}
		/* string game = 5; */
		if (message.game !== "") {
			writer.tag(5, WireType.LengthDelimited).string(message.game);
		}
		/* string version = 6; */
		if (message.version !== "") {
			writer.tag(6, WireType.LengthDelimited).string(message.version);
		}
		/* repeated string tags = 7; */
		for (let i = 0; i < message.tags.length; i++) {
			writer.tag(7, WireType.LengthDelimited).string(message.tags[i]);
		}
		/* optional string map = 8; */
		if (message.map !== undefined) {
			writer.tag(8, WireType.LengthDelimited).string(message.map);
		}
		/* uint32 players = 9; */
		if (message.players !== 0) {
			writer.tag(9, WireType.Varint).uint32(message.players);
		}
		/* uint32 max_players = 10; */
		if (message.maxPlayers !== 0) {
			writer.tag(10, WireType.Varint).uint32(message.maxPlayers);
		}
		/* uint32 bots = 11; */
		if (message.bots !== 0) {
			writer.tag(11, WireType.Varint).uint32(message.bots);
		}
		/* uint32 max_spectators = 12; */
		if (message.maxSpectators !== 0) {
			writer.tag(12, WireType.Varint).uint32(message.maxSpectators);
		}
		/* uint32 spectators = 13; */
		if (message.spectators !== 0) {
			writer.tag(13, WireType.Varint).uint32(message.spectators);
		}
		/* bool join_in_progress = 14; */
		if (message.joinInProgress !== false) {
			writer.tag(14, WireType.Varint).bool(message.joinInProgress);
		}
		/* bool joinable = 15; */
		if (message.joinable !== false) {
			writer.tag(15, WireType.Varint).bool(message.joinable);
		}
		/* bool has_password = 16; */
		if (message.hasPassword !== false) {
			writer.tag(16, WireType.Varint).bool(message.hasPassword);
		}
		/* tempest.common.CountryCode country = 17; */
		if (message.country !== 0) {
			writer.tag(17, WireType.Varint).int32(message.country);
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message tempest.server_list.ServerListing
 */
export const ServerListing = new ServerListing$Type();
