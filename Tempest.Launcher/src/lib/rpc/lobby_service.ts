// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "lobby_service.proto" (syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { Lobby } from "./lobby";
import { LobbyPlayer } from "./lobby_player";
/**
 * @generated from protobuf message ConnectLobbyRequest
 */
export interface ConnectLobbyRequest {
}
/**
 * @generated from protobuf message LeaveLobbyRequest
 */
export interface LeaveLobbyRequest {
}
/**
 * @generated from protobuf message LeaveLobbyResponse
 */
export interface LeaveLobbyResponse {
}
/**
 * @generated from protobuf message LobbyEvent
 */
export interface LobbyEvent {
	/**
	 * @generated from protobuf oneof: event
	 */
	event: {
		oneofKind: "update";
		/**
		 * @generated from protobuf field: Lobby update = 1
		 */
		update: Lobby;
	} | {
		oneofKind: "playerJoin";
		/**
		 * @generated from protobuf field: LobbyPlayer player_join = 2
		 */
		playerJoin: LobbyPlayer;
	} | {
		oneofKind: "playerLeave";
		/**
		 * @generated from protobuf field: uint64 player_leave = 3
		 */
		playerLeave: bigint;
	} | {
		oneofKind: undefined;
	};
}
/**
 * @generated from protobuf message JoinLobbyRequest
 */
export interface JoinLobbyRequest {
	/**
	 * @generated from protobuf field: string id = 1
	 */
	id: string;
	/**
	 * @generated from protobuf field: string lobby_password = 2
	 */
	lobbyPassword: string;
	/**
	 * @generated from protobuf field: string username = 3
	 */
	username: string;
}
/**
 * @generated from protobuf message JoinLobbySuccessResponse
 */
export interface JoinLobbySuccessResponse {
	/**
	 * @generated from protobuf field: Lobby lobby = 1
	 */
	lobby?: Lobby;
	/**
	 * @generated from protobuf field: string ticket = 2
	 */
	ticket: string;
}
/**
 * @generated from protobuf message JoinLobbyResponse
 */
export interface JoinLobbyResponse {
	/**
	 * @generated from protobuf oneof: result
	 */
	result: {
		oneofKind: "success";
		/**
		 * @generated from protobuf field: JoinLobbySuccessResponse success = 1
		 */
		success: JoinLobbySuccessResponse;
	} | {
		oneofKind: "error";
		/**
		 * @generated from protobuf field: JoinLobbyError error = 2
		 */
		error: JoinLobbyError;
	} | {
		oneofKind: undefined;
	};
}
/**
 * @generated from protobuf enum JoinLobbyError
 */
export enum JoinLobbyError {
	/**
	 * @generated from protobuf enum value: FULL_LOBBY = 0;
	 */
	FULL_LOBBY = 0,
	/**
	 * @generated from protobuf enum value: INVALID_PASSWORD = 1;
	 */
	INVALID_PASSWORD = 1,
	/**
	 * @generated from protobuf enum value: INVALID_LOBBY = 2;
	 */
	INVALID_LOBBY = 2,
}
// @generated message type with reflection information, may provide speed optimized methods
class ConnectLobbyRequest$Type extends MessageType<ConnectLobbyRequest> {
	constructor() {
		super("ConnectLobbyRequest", []);
	}
	create(value?: PartialMessage<ConnectLobbyRequest>): ConnectLobbyRequest {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) {
			reflectionMergePartial<ConnectLobbyRequest>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: ConnectLobbyRequest,
	): ConnectLobbyRequest {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(message: ConnectLobbyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message ConnectLobbyRequest
 */
export const ConnectLobbyRequest = new ConnectLobbyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveLobbyRequest$Type extends MessageType<LeaveLobbyRequest> {
	constructor() {
		super("LeaveLobbyRequest", []);
	}
	create(value?: PartialMessage<LeaveLobbyRequest>): LeaveLobbyRequest {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) {
			reflectionMergePartial<LeaveLobbyRequest>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: LeaveLobbyRequest,
	): LeaveLobbyRequest {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(message: LeaveLobbyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message LeaveLobbyRequest
 */
export const LeaveLobbyRequest = new LeaveLobbyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveLobbyResponse$Type extends MessageType<LeaveLobbyResponse> {
	constructor() {
		super("LeaveLobbyResponse", []);
	}
	create(value?: PartialMessage<LeaveLobbyResponse>): LeaveLobbyResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) {
			reflectionMergePartial<LeaveLobbyResponse>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: LeaveLobbyResponse,
	): LeaveLobbyResponse {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(message: LeaveLobbyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message LeaveLobbyResponse
 */
export const LeaveLobbyResponse = new LeaveLobbyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LobbyEvent$Type extends MessageType<LobbyEvent> {
	constructor() {
		super("LobbyEvent", [
			{ no: 1, name: "update", kind: "message", oneof: "event", T: () => Lobby },
			{ no: 2, name: "player_join", kind: "message", oneof: "event", T: () => LobbyPlayer },
			{
				no: 3,
				name: "player_leave",
				kind: "scalar",
				oneof: "event",
				T: 4, /*ScalarType.UINT64*/
				L: 0, /*LongType.BIGINT*/
			},
		]);
	}
	create(value?: PartialMessage<LobbyEvent>): LobbyEvent {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.event = { oneofKind: undefined };
		if (value !== undefined) {
			reflectionMergePartial<LobbyEvent>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: LobbyEvent,
	): LobbyEvent {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* Lobby update */ 1:
					message.event = {
						oneofKind: "update",
						update: Lobby.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).update),
					};
					break;
				case /* LobbyPlayer player_join */ 2:
					message.event = {
						oneofKind: "playerJoin",
						playerJoin: LobbyPlayer.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.event as any).playerJoin,
						),
					};
					break;
				case /* uint64 player_leave */ 3:
					message.event = {
						oneofKind: "playerLeave",
						playerLeave: reader.uint64().toBigInt(),
					};
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(message: LobbyEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* Lobby update = 1; */
		if (message.event.oneofKind === "update") {
			Lobby.internalBinaryWrite(message.event.update, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
		}
		/* LobbyPlayer player_join = 2; */
		if (message.event.oneofKind === "playerJoin") {
			LobbyPlayer.internalBinaryWrite(message.event.playerJoin, writer.tag(2, WireType.LengthDelimited).fork(), options)
				.join();
		}
		/* uint64 player_leave = 3; */
		if (message.event.oneofKind === "playerLeave") {
			writer.tag(3, WireType.Varint).uint64(message.event.playerLeave);
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message LobbyEvent
 */
export const LobbyEvent = new LobbyEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinLobbyRequest$Type extends MessageType<JoinLobbyRequest> {
	constructor() {
		super("JoinLobbyRequest", [
			{ no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 2, name: "lobby_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 3, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
		]);
	}
	create(value?: PartialMessage<JoinLobbyRequest>): JoinLobbyRequest {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.id = "";
		message.lobbyPassword = "";
		message.username = "";
		if (value !== undefined) {
			reflectionMergePartial<JoinLobbyRequest>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: JoinLobbyRequest,
	): JoinLobbyRequest {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* string id */ 1:
					message.id = reader.string();
					break;
				case /* string lobby_password */ 2:
					message.lobbyPassword = reader.string();
					break;
				case /* string username */ 3:
					message.username = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(message: JoinLobbyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* string id = 1; */
		if (message.id !== "") {
			writer.tag(1, WireType.LengthDelimited).string(message.id);
		}
		/* string lobby_password = 2; */
		if (message.lobbyPassword !== "") {
			writer.tag(2, WireType.LengthDelimited).string(message.lobbyPassword);
		}
		/* string username = 3; */
		if (message.username !== "") {
			writer.tag(3, WireType.LengthDelimited).string(message.username);
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message JoinLobbyRequest
 */
export const JoinLobbyRequest = new JoinLobbyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinLobbySuccessResponse$Type extends MessageType<JoinLobbySuccessResponse> {
	constructor() {
		super("JoinLobbySuccessResponse", [
			{ no: 1, name: "lobby", kind: "message", T: () => Lobby },
			{ no: 2, name: "ticket", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
		]);
	}
	create(value?: PartialMessage<JoinLobbySuccessResponse>): JoinLobbySuccessResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.ticket = "";
		if (value !== undefined) {
			reflectionMergePartial<JoinLobbySuccessResponse>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: JoinLobbySuccessResponse,
	): JoinLobbySuccessResponse {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* Lobby lobby */ 1:
					message.lobby = Lobby.internalBinaryRead(reader, reader.uint32(), options, message.lobby);
					break;
				case /* string ticket */ 2:
					message.ticket = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: JoinLobbySuccessResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* Lobby lobby = 1; */
		if (message.lobby) {
			Lobby.internalBinaryWrite(message.lobby, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
		}
		/* string ticket = 2; */
		if (message.ticket !== "") {
			writer.tag(2, WireType.LengthDelimited).string(message.ticket);
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message JoinLobbySuccessResponse
 */
export const JoinLobbySuccessResponse = new JoinLobbySuccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinLobbyResponse$Type extends MessageType<JoinLobbyResponse> {
	constructor() {
		super("JoinLobbyResponse", [
			{ no: 1, name: "success", kind: "message", oneof: "result", T: () => JoinLobbySuccessResponse },
			{ no: 2, name: "error", kind: "enum", oneof: "result", T: () => ["JoinLobbyError", JoinLobbyError] },
		]);
	}
	create(value?: PartialMessage<JoinLobbyResponse>): JoinLobbyResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.result = { oneofKind: undefined };
		if (value !== undefined) {
			reflectionMergePartial<JoinLobbyResponse>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: JoinLobbyResponse,
	): JoinLobbyResponse {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* JoinLobbySuccessResponse success */ 1:
					message.result = {
						oneofKind: "success",
						success: JoinLobbySuccessResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.result as any).success,
						),
					};
					break;
				case /* JoinLobbyError error */ 2:
					message.result = {
						oneofKind: "error",
						error: reader.int32(),
					};
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(message: JoinLobbyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* JoinLobbySuccessResponse success = 1; */
		if (message.result.oneofKind === "success") {
			JoinLobbySuccessResponse.internalBinaryWrite(
				message.result.success,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		}
		/* JoinLobbyError error = 2; */
		if (message.result.oneofKind === "error") {
			writer.tag(2, WireType.Varint).int32(message.result.error);
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message JoinLobbyResponse
 */
export const JoinLobbyResponse = new JoinLobbyResponse$Type();
/**
 * @generated ServiceType for protobuf service LobbyService
 */
export const LobbyService = new ServiceType("LobbyService", [
	{ name: "JoinLobby", options: {}, I: JoinLobbyRequest, O: JoinLobbyResponse },
	{ name: "LeaveLobby", options: {}, I: LeaveLobbyRequest, O: LeaveLobbyResponse },
	{ name: "ConnectLobby", serverStreaming: true, options: {}, I: ConnectLobbyRequest, O: LobbyEvent },
]);
