// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "lobby.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Server } from "./server";
/**
 * @generated from protobuf message Lobby
 */
export interface Lobby {
	/**
	 * @generated from protobuf field: Server server = 1
	 */
	server?: Server;
	/**
	 * @generated from protobuf oneof: state
	 */
	state: {
		oneofKind: "x";
		/**
		 * @generated from protobuf field: string x = 2
		 */
		x: string;
	} | {
		oneofKind: undefined;
	};
}
// @generated message type with reflection information, may provide speed optimized methods
class Lobby$Type extends MessageType<Lobby> {
	constructor() {
		super("Lobby", [
			{ no: 1, name: "server", kind: "message", T: () => Server },
			{ no: 2, name: "x", kind: "scalar", oneof: "state", T: 9 /*ScalarType.STRING*/ },
		]);
	}
	create(value?: PartialMessage<Lobby>): Lobby {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.state = { oneofKind: undefined };
		if (value !== undefined) {
			reflectionMergePartial<Lobby>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Lobby): Lobby {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* Server server */ 1:
					message.server = Server.internalBinaryRead(reader, reader.uint32(), options, message.server);
					break;
				case /* string x */ 2:
					message.state = {
						oneofKind: "x",
						x: reader.string(),
					};
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(message: Lobby, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* Server server = 1; */
		if (message.server) {
			Server.internalBinaryWrite(message.server, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
		}
		/* string x = 2; */
		if (message.state.oneofKind === "x") {
			writer.tag(2, WireType.LengthDelimited).string(message.state.x);
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message Lobby
 */
export const Lobby = new Lobby$Type();
