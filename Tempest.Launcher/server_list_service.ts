// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "server_list_service.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { Server } from "./server";
/**
 * @generated from protobuf message GetServerByIdRequest
 */
export interface GetServerByIdRequest {
	/**
	 * @generated from protobuf field: uint64 id = 1
	 */
	id: bigint;
}
/**
 * @generated from protobuf message GetServerByIdResponse
 */
export interface GetServerByIdResponse {
	/**
	 * @generated from protobuf oneof: result
	 */
	result: {
		oneofKind: "server";
		/**
		 * @generated from protobuf field: Server server = 1
		 */
		server: Server;
	} | {
		oneofKind: undefined;
	};
}
/**
 * @generated from protobuf message GetServersRequest
 */
export interface GetServersRequest {
	/**
	 * @generated from protobuf field: string name = 1
	 */
	name: string;
	/**
	 * @generated from protobuf field: string game = 2
	 */
	game: string;
	/**
	 * @generated from protobuf field: string version = 3
	 */
	version: string;
	/**
	 * @generated from protobuf field: string tags = 4
	 */
	tags: string;
	/**
	 * @generated from protobuf field: bool join_in_progress = 5
	 */
	joinInProgress: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetServerByIdRequest$Type extends MessageType<GetServerByIdRequest> {
	constructor() {
		super("GetServerByIdRequest", [
			{ no: 1, name: "id", kind: "scalar", T: 4, /*ScalarType.UINT64*/ L: 0 /*LongType.BIGINT*/ },
		]);
	}
	create(value?: PartialMessage<GetServerByIdRequest>): GetServerByIdRequest {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.id = 0n;
		if (value !== undefined) {
			reflectionMergePartial<GetServerByIdRequest>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: GetServerByIdRequest,
	): GetServerByIdRequest {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* uint64 id */ 1:
					message.id = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: GetServerByIdRequest,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* uint64 id = 1; */
		if (message.id !== 0n) {
			writer.tag(1, WireType.Varint).uint64(message.id);
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message GetServerByIdRequest
 */
export const GetServerByIdRequest = new GetServerByIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetServerByIdResponse$Type extends MessageType<GetServerByIdResponse> {
	constructor() {
		super("GetServerByIdResponse", [
			{ no: 1, name: "server", kind: "message", oneof: "result", T: () => Server },
		]);
	}
	create(value?: PartialMessage<GetServerByIdResponse>): GetServerByIdResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.result = { oneofKind: undefined };
		if (value !== undefined) {
			reflectionMergePartial<GetServerByIdResponse>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: GetServerByIdResponse,
	): GetServerByIdResponse {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* Server server */ 1:
					message.result = {
						oneofKind: "server",
						server: Server.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).server),
					};
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: GetServerByIdResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* Server server = 1; */
		if (message.result.oneofKind === "server") {
			Server.internalBinaryWrite(message.result.server, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message GetServerByIdResponse
 */
export const GetServerByIdResponse = new GetServerByIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetServersRequest$Type extends MessageType<GetServersRequest> {
	constructor() {
		super("GetServersRequest", [
			{ no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 2, name: "game", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 3, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 4, name: "tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{ no: 5, name: "join_in_progress", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
		]);
	}
	create(value?: PartialMessage<GetServersRequest>): GetServersRequest {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.name = "";
		message.game = "";
		message.version = "";
		message.tags = "";
		message.joinInProgress = false;
		if (value !== undefined) {
			reflectionMergePartial<GetServersRequest>(this, message, value);
		}
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: GetServersRequest,
	): GetServersRequest {
		let message = target ?? this.create(), end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* string name */ 1:
					message.name = reader.string();
					break;
				case /* string game */ 2:
					message.game = reader.string();
					break;
				case /* string version */ 3:
					message.version = reader.string();
					break;
				case /* string tags */ 4:
					message.tags = reader.string();
					break;
				case /* bool join_in_progress */ 5:
					message.joinInProgress = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw") {
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					}
					let d = reader.skip(wireType);
					if (u !== false) {
						(u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
					}
			}
		}
		return message;
	}
	internalBinaryWrite(message: GetServersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* string name = 1; */
		if (message.name !== "") {
			writer.tag(1, WireType.LengthDelimited).string(message.name);
		}
		/* string game = 2; */
		if (message.game !== "") {
			writer.tag(2, WireType.LengthDelimited).string(message.game);
		}
		/* string version = 3; */
		if (message.version !== "") {
			writer.tag(3, WireType.LengthDelimited).string(message.version);
		}
		/* string tags = 4; */
		if (message.tags !== "") {
			writer.tag(4, WireType.LengthDelimited).string(message.tags);
		}
		/* bool join_in_progress = 5; */
		if (message.joinInProgress !== false) {
			writer.tag(5, WireType.Varint).bool(message.joinInProgress);
		}
		let u = options.writeUnknownFields;
		if (u !== false) {
			(u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		}
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message GetServersRequest
 */
export const GetServersRequest = new GetServersRequest$Type();
/**
 * @generated ServiceType for protobuf service ServerListService
 */
export const ServerListService = new ServiceType("ServerListService", [
	{ name: "GetServers", serverStreaming: true, options: {}, I: GetServersRequest, O: Server },
	{ name: "GetServerById", options: {}, I: GetServerByIdRequest, O: GetServerByIdResponse },
]);
